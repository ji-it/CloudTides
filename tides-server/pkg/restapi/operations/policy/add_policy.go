// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddPolicyHandlerFunc turns a function with the right signature into a add policy handler
type AddPolicyHandlerFunc func(AddPolicyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddPolicyHandlerFunc) Handle(params AddPolicyParams) middleware.Responder {
	return fn(params)
}

// AddPolicyHandler interface for that can handle valid add policy params
type AddPolicyHandler interface {
	Handle(AddPolicyParams) middleware.Responder
}

// NewAddPolicy creates a new http.Handler for the add policy operation
func NewAddPolicy(ctx *middleware.Context, handler AddPolicyHandler) *AddPolicy {
	return &AddPolicy{Context: ctx, Handler: handler}
}

/* AddPolicy swagger:route POST /policy policy addPolicy

add a new idle policy and threshold policy

*/
type AddPolicy struct {
	Context *middleware.Context
	Handler AddPolicyHandler
}

func (o *AddPolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddPolicyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddPolicyBadRequestBody add policy bad request body
//
// swagger:model AddPolicyBadRequestBody
type AddPolicyBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add policy bad request body
func (o *AddPolicyBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add policy bad request body based on context it is used
func (o *AddPolicyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddPolicyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddPolicyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AddPolicyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddPolicyBody add policy body
//
// swagger:model AddPolicyBody
type AddPolicyBody struct {

	// catalog
	Catalog string `json:"catalog,omitempty"`

	// deploy type
	// Enum: [K8S VM]
	DeployType string `json:"deployType,omitempty"`

	// idle
	Idle string `json:"idle,omitempty"`

	// is destroy
	IsDestroy bool `json:"isDestroy,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// platform type
	PlatformType string `json:"platformType,omitempty"`

	// template Id
	TemplateID int64 `json:"templateId,omitempty"`

	// threshold
	Threshold string `json:"threshold,omitempty"`
}

// Validate validates this add policy body
func (o *AddPolicyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeployType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addPolicyBodyTypeDeployTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["K8S","VM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addPolicyBodyTypeDeployTypePropEnum = append(addPolicyBodyTypeDeployTypePropEnum, v)
	}
}

const (

	// AddPolicyBodyDeployTypeK8S captures enum value "K8S"
	AddPolicyBodyDeployTypeK8S string = "K8S"

	// AddPolicyBodyDeployTypeVM captures enum value "VM"
	AddPolicyBodyDeployTypeVM string = "VM"
)

// prop value enum
func (o *AddPolicyBody) validateDeployTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addPolicyBodyTypeDeployTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddPolicyBody) validateDeployType(formats strfmt.Registry) error {
	if swag.IsZero(o.DeployType) { // not required
		return nil
	}

	// value enum
	if err := o.validateDeployTypeEnum("reqBody"+"."+"deployType", "body", o.DeployType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add policy body based on context it is used
func (o *AddPolicyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddPolicyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddPolicyBody) UnmarshalBinary(b []byte) error {
	var res AddPolicyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddPolicyOKBody add policy o k body
//
// swagger:model AddPolicyOKBody
type AddPolicyOKBody struct {

	// id
	ID int64 `json:"id,omitempty"`

	// message
	// Enum: [success]
	Message string `json:"message,omitempty"`
}

// Validate validates this add policy o k body
func (o *AddPolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addPolicyOKBodyTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addPolicyOKBodyTypeMessagePropEnum = append(addPolicyOKBodyTypeMessagePropEnum, v)
	}
}

const (

	// AddPolicyOKBodyMessageSuccess captures enum value "success"
	AddPolicyOKBodyMessageSuccess string = "success"
)

// prop value enum
func (o *AddPolicyOKBody) validateMessageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addPolicyOKBodyTypeMessagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddPolicyOKBody) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(o.Message) { // not required
		return nil
	}

	// value enum
	if err := o.validateMessageEnum("addPolicyOK"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add policy o k body based on context it is used
func (o *AddPolicyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res AddPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
