// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddVcdResourceHandlerFunc turns a function with the right signature into a add vcd resource handler
type AddVcdResourceHandlerFunc func(AddVcdResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddVcdResourceHandlerFunc) Handle(params AddVcdResourceParams) middleware.Responder {
	return fn(params)
}

// AddVcdResourceHandler interface for that can handle valid add vcd resource params
type AddVcdResourceHandler interface {
	Handle(AddVcdResourceParams) middleware.Responder
}

// NewAddVcdResource creates a new http.Handler for the add vcd resource operation
func NewAddVcdResource(ctx *middleware.Context, handler AddVcdResourceHandler) *AddVcdResource {
	return &AddVcdResource{Context: ctx, Handler: handler}
}

/* AddVcdResource swagger:route POST /resource/vcd resource addVcdResource

AddVcdResource add vcd resource API

*/
type AddVcdResource struct {
	Context *middleware.Context
	Handler AddVcdResourceHandler
}

func (o *AddVcdResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddVcdResourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddVcdResourceBody add vcd resource body
//
// swagger:model AddVcdResourceBody
type AddVcdResourceBody struct {

	// catalog
	Catalog string `json:"catalog,omitempty"`

	// datacenter
	Datacenter string `json:"datacenter,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// org
	Org string `json:"org,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// policy
	Policy int64 `json:"policy,omitempty"`

	// res type
	ResType string `json:"resType,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this add vcd resource body
func (o *AddVcdResourceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vcd resource body based on context it is used
func (o *AddVcdResourceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVcdResourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVcdResourceBody) UnmarshalBinary(b []byte) error {
	var res AddVcdResourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVcdResourceNotFoundBody add vcd resource not found body
//
// swagger:model AddVcdResourceNotFoundBody
type AddVcdResourceNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add vcd resource not found body
func (o *AddVcdResourceNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vcd resource not found body based on context it is used
func (o *AddVcdResourceNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVcdResourceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVcdResourceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AddVcdResourceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVcdResourceOKBody add vcd resource o k body
//
// swagger:model AddVcdResourceOKBody
type AddVcdResourceOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results *AddVcdResourceOKBodyResults `json:"results,omitempty"`
}

// Validate validates this add vcd resource o k body
func (o *AddVcdResourceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddVcdResourceOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	if o.Results != nil {
		if err := o.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addVcdResourceOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this add vcd resource o k body based on the context it is used
func (o *AddVcdResourceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddVcdResourceOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if o.Results != nil {
		if err := o.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addVcdResourceOK" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddVcdResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVcdResourceOKBody) UnmarshalBinary(b []byte) error {
	var res AddVcdResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVcdResourceOKBodyResults add vcd resource o k body results
//
// swagger:model AddVcdResourceOKBodyResults
type AddVcdResourceOKBodyResults struct {

	// resource Id
	ResourceID int64 `json:"resourceId,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// vcd Id
	VcdID int64 `json:"vcdId,omitempty"`
}

// Validate validates this add vcd resource o k body results
func (o *AddVcdResourceOKBodyResults) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vcd resource o k body results based on context it is used
func (o *AddVcdResourceOKBodyResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVcdResourceOKBodyResults) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVcdResourceOKBodyResults) UnmarshalBinary(b []byte) error {
	var res AddVcdResourceOKBodyResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
