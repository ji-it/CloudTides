// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteVcdResourceOKCode is the HTTP code returned for type DeleteVcdResourceOK
const DeleteVcdResourceOKCode int = 200

/*DeleteVcdResourceOK deletion success

swagger:response deleteVcdResourceOK
*/
type DeleteVcdResourceOK struct {

	/*
	  In: Body
	*/
	Payload *DeleteVcdResourceOKBody `json:"body,omitempty"`
}

// NewDeleteVcdResourceOK creates DeleteVcdResourceOK with default headers values
func NewDeleteVcdResourceOK() *DeleteVcdResourceOK {

	return &DeleteVcdResourceOK{}
}

// WithPayload adds the payload to the delete vcd resource o k response
func (o *DeleteVcdResourceOK) WithPayload(payload *DeleteVcdResourceOKBody) *DeleteVcdResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vcd resource o k response
func (o *DeleteVcdResourceOK) SetPayload(payload *DeleteVcdResourceOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVcdResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteVcdResourceUnauthorizedCode is the HTTP code returned for type DeleteVcdResourceUnauthorized
const DeleteVcdResourceUnauthorizedCode int = 401

/*DeleteVcdResourceUnauthorized Unauthorized

swagger:response deleteVcdResourceUnauthorized
*/
type DeleteVcdResourceUnauthorized struct {
}

// NewDeleteVcdResourceUnauthorized creates DeleteVcdResourceUnauthorized with default headers values
func NewDeleteVcdResourceUnauthorized() *DeleteVcdResourceUnauthorized {

	return &DeleteVcdResourceUnauthorized{}
}

// WriteResponse to the client
func (o *DeleteVcdResourceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// DeleteVcdResourceForbiddenCode is the HTTP code returned for type DeleteVcdResourceForbidden
const DeleteVcdResourceForbiddenCode int = 403

/*DeleteVcdResourceForbidden Forbidden

swagger:response deleteVcdResourceForbidden
*/
type DeleteVcdResourceForbidden struct {
}

// NewDeleteVcdResourceForbidden creates DeleteVcdResourceForbidden with default headers values
func NewDeleteVcdResourceForbidden() *DeleteVcdResourceForbidden {

	return &DeleteVcdResourceForbidden{}
}

// WriteResponse to the client
func (o *DeleteVcdResourceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// DeleteVcdResourceNotFoundCode is the HTTP code returned for type DeleteVcdResourceNotFound
const DeleteVcdResourceNotFoundCode int = 404

/*DeleteVcdResourceNotFound resource not found

swagger:response deleteVcdResourceNotFound
*/
type DeleteVcdResourceNotFound struct {

	/*
	  In: Body
	*/
	Payload *DeleteVcdResourceNotFoundBody `json:"body,omitempty"`
}

// NewDeleteVcdResourceNotFound creates DeleteVcdResourceNotFound with default headers values
func NewDeleteVcdResourceNotFound() *DeleteVcdResourceNotFound {

	return &DeleteVcdResourceNotFound{}
}

// WithPayload adds the payload to the delete vcd resource not found response
func (o *DeleteVcdResourceNotFound) WithPayload(payload *DeleteVcdResourceNotFoundBody) *DeleteVcdResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete vcd resource not found response
func (o *DeleteVcdResourceNotFound) SetPayload(payload *DeleteVcdResourceNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteVcdResourceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
