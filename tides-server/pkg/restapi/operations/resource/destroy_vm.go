// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DestroyVMHandlerFunc turns a function with the right signature into a destroy VM handler
type DestroyVMHandlerFunc func(DestroyVMParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DestroyVMHandlerFunc) Handle(params DestroyVMParams) middleware.Responder {
	return fn(params)
}

// DestroyVMHandler interface for that can handle valid destroy VM params
type DestroyVMHandler interface {
	Handle(DestroyVMParams) middleware.Responder
}

// NewDestroyVM creates a new http.Handler for the destroy VM operation
func NewDestroyVM(ctx *middleware.Context, handler DestroyVMHandler) *DestroyVM {
	return &DestroyVM{Context: ctx, Handler: handler}
}

/* DestroyVM swagger:route PUT /resource/destroy_vm resource destroyVm

destroy specified VM

*/
type DestroyVM struct {
	Context *middleware.Context
	Handler DestroyVMHandler
}

func (o *DestroyVM) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDestroyVMParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DestroyVMBody destroy VM body
//
// swagger:model DestroyVMBody
type DestroyVMBody struct {

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`
}

// Validate validates this destroy VM body
func (o *DestroyVMBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this destroy VM body based on context it is used
func (o *DestroyVMBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DestroyVMBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DestroyVMBody) UnmarshalBinary(b []byte) error {
	var res DestroyVMBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DestroyVMNotFoundBody destroy VM not found body
//
// swagger:model DestroyVMNotFoundBody
type DestroyVMNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this destroy VM not found body
func (o *DestroyVMNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this destroy VM not found body based on context it is used
func (o *DestroyVMNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DestroyVMNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DestroyVMNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DestroyVMNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DestroyVMOKBody destroy VM o k body
//
// swagger:model DestroyVMOKBody
type DestroyVMOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this destroy VM o k body
func (o *DestroyVMOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this destroy VM o k body based on context it is used
func (o *DestroyVMOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DestroyVMOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DestroyVMOKBody) UnmarshalBinary(b []byte) error {
	var res DestroyVMOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
