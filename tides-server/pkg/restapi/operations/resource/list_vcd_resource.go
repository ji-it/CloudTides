// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListVcdResourceHandlerFunc turns a function with the right signature into a list vcd resource handler
type ListVcdResourceHandlerFunc func(ListVcdResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListVcdResourceHandlerFunc) Handle(params ListVcdResourceParams) middleware.Responder {
	return fn(params)
}

// ListVcdResourceHandler interface for that can handle valid list vcd resource params
type ListVcdResourceHandler interface {
	Handle(ListVcdResourceParams) middleware.Responder
}

// NewListVcdResource creates a new http.Handler for the list vcd resource operation
func NewListVcdResource(ctx *middleware.Context, handler ListVcdResourceHandler) *ListVcdResource {
	return &ListVcdResource{Context: ctx, Handler: handler}
}

/* ListVcdResource swagger:route GET /resource/vcd resource listVcdResource

list vcd resources

*/
type ListVcdResource struct {
	Context *middleware.Context
	Handler ListVcdResourceHandler
}

func (o *ListVcdResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListVcdResourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListVcdResourceOKBodyItems0 list vcd resource o k body items0
//
// swagger:model ListVcdResourceOKBodyItems0
type ListVcdResourceOKBodyItems0 struct {

	// allocation model
	AllocationModel string `json:"allocationModel,omitempty"`

	// datacenter
	Datacenter string `json:"datacenter,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is active
	IsActive bool `json:"isActive,omitempty"`

	// monitored
	Monitored bool `json:"monitored,omitempty"`

	// organization
	Organization string `json:"organization,omitempty"`

	// policy
	Policy int64 `json:"policy,omitempty"`

	// res type
	ResType string `json:"resType,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// vcd Id
	VcdID int64 `json:"vcdId,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this list vcd resource o k body items0
func (o *ListVcdResourceOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list vcd resource o k body items0 based on context it is used
func (o *ListVcdResourceOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListVcdResourceOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVcdResourceOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListVcdResourceOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
