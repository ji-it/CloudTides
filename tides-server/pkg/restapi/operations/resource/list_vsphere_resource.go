// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tides-server/pkg/models"
)

// ListVsphereResourceHandlerFunc turns a function with the right signature into a list vsphere resource handler
type ListVsphereResourceHandlerFunc func(ListVsphereResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListVsphereResourceHandlerFunc) Handle(params ListVsphereResourceParams) middleware.Responder {
	return fn(params)
}

// ListVsphereResourceHandler interface for that can handle valid list vsphere resource params
type ListVsphereResourceHandler interface {
	Handle(ListVsphereResourceParams) middleware.Responder
}

// NewListVsphereResource creates a new http.Handler for the list vsphere resource operation
func NewListVsphereResource(ctx *middleware.Context, handler ListVsphereResourceHandler) *ListVsphereResource {
	return &ListVsphereResource{Context: ctx, Handler: handler}
}

/* ListVsphereResource swagger:route GET /resource/vsphere resource listVsphereResource

returns the list of resources belonging to a user

*/
type ListVsphereResource struct {
	Context *middleware.Context
	Handler ListVsphereResourceHandler
}

func (o *ListVsphereResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListVsphereResourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListVsphereResourceOKBody list vsphere resource o k body
//
// swagger:model ListVsphereResourceOKBody
type ListVsphereResourceOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results []*models.ResourceListItem `json:"results"`
}

// Validate validates this list vsphere resource o k body
func (o *ListVsphereResourceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVsphereResourceOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listVsphereResourceOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list vsphere resource o k body based on the context it is used
func (o *ListVsphereResourceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVsphereResourceOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {
			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listVsphereResourceOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListVsphereResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVsphereResourceOKBody) UnmarshalBinary(b []byte) error {
	var res ListVsphereResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
