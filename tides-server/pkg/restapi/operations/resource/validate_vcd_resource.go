// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidateVcdResourceHandlerFunc turns a function with the right signature into a validate vcd resource handler
type ValidateVcdResourceHandlerFunc func(ValidateVcdResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ValidateVcdResourceHandlerFunc) Handle(params ValidateVcdResourceParams) middleware.Responder {
	return fn(params)
}

// ValidateVcdResourceHandler interface for that can handle valid validate vcd resource params
type ValidateVcdResourceHandler interface {
	Handle(ValidateVcdResourceParams) middleware.Responder
}

// NewValidateVcdResource creates a new http.Handler for the validate vcd resource operation
func NewValidateVcdResource(ctx *middleware.Context, handler ValidateVcdResourceHandler) *ValidateVcdResource {
	return &ValidateVcdResource{Context: ctx, Handler: handler}
}

/* ValidateVcdResource swagger:route GET /resource/vcd/validate resource validateVcdResource

ValidateVcdResource validate vcd resource API

*/
type ValidateVcdResource struct {
	Context *middleware.Context
	Handler ValidateVcdResourceHandler
}

func (o *ValidateVcdResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewValidateVcdResourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ValidateVcdResourceBody validate vcd resource body
//
// swagger:model ValidateVcdResourceBody
type ValidateVcdResourceBody struct {

	// href
	Href string `json:"href,omitempty"`

	// org
	Org string `json:"org,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// vdc
	Vdc string `json:"vdc,omitempty"`
}

// Validate validates this validate vcd resource body
func (o *ValidateVcdResourceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validate vcd resource body based on context it is used
func (o *ValidateVcdResourceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateVcdResourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateVcdResourceBody) UnmarshalBinary(b []byte) error {
	var res ValidateVcdResourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ValidateVcdResourceNotFoundBody validate vcd resource not found body
//
// swagger:model ValidateVcdResourceNotFoundBody
type ValidateVcdResourceNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this validate vcd resource not found body
func (o *ValidateVcdResourceNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validate vcd resource not found body based on context it is used
func (o *ValidateVcdResourceNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateVcdResourceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateVcdResourceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ValidateVcdResourceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ValidateVcdResourceOKBody list of data centers belonging to the host
//
// swagger:model ValidateVcdResourceOKBody
type ValidateVcdResourceOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this validate vcd resource o k body
func (o *ValidateVcdResourceOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validate vcd resource o k body based on context it is used
func (o *ValidateVcdResourceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateVcdResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateVcdResourceOKBody) UnmarshalBinary(b []byte) error {
	var res ValidateVcdResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
