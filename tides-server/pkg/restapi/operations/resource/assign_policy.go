// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssignPolicyHandlerFunc turns a function with the right signature into a assign policy handler
type AssignPolicyHandlerFunc func(AssignPolicyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AssignPolicyHandlerFunc) Handle(params AssignPolicyParams) middleware.Responder {
	return fn(params)
}

// AssignPolicyHandler interface for that can handle valid assign policy params
type AssignPolicyHandler interface {
	Handle(AssignPolicyParams) middleware.Responder
}

// NewAssignPolicy creates a new http.Handler for the assign policy operation
func NewAssignPolicy(ctx *middleware.Context, handler AssignPolicyHandler) *AssignPolicy {
	return &AssignPolicy{Context: ctx, Handler: handler}
}

/* AssignPolicy swagger:route PUT /resource/policy/{id} resource assignPolicy

assign policy

*/
type AssignPolicy struct {
	Context *middleware.Context
	Handler AssignPolicyHandler
}

func (o *AssignPolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAssignPolicyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AssignPolicyBody assign policy body
//
// swagger:model AssignPolicyBody
type AssignPolicyBody struct {

	// policy
	Policy int64 `json:"policy,omitempty"`
}

// Validate validates this assign policy body
func (o *AssignPolicyBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this assign policy body based on context it is used
func (o *AssignPolicyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssignPolicyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssignPolicyBody) UnmarshalBinary(b []byte) error {
	var res AssignPolicyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AssignPolicyNotFoundBody assign policy not found body
//
// swagger:model AssignPolicyNotFoundBody
type AssignPolicyNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this assign policy not found body
func (o *AssignPolicyNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this assign policy not found body based on context it is used
func (o *AssignPolicyNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssignPolicyNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssignPolicyNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AssignPolicyNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AssignPolicyOKBody assign policy o k body
//
// swagger:model AssignPolicyOKBody
type AssignPolicyOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this assign policy o k body
func (o *AssignPolicyOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this assign policy o k body based on context it is used
func (o *AssignPolicyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AssignPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssignPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res AssignPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
