// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContributeResourceHandlerFunc turns a function with the right signature into a contribute resource handler
type ContributeResourceHandlerFunc func(ContributeResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContributeResourceHandlerFunc) Handle(params ContributeResourceParams) middleware.Responder {
	return fn(params)
}

// ContributeResourceHandler interface for that can handle valid contribute resource params
type ContributeResourceHandler interface {
	Handle(ContributeResourceParams) middleware.Responder
}

// NewContributeResource creates a new http.Handler for the contribute resource operation
func NewContributeResource(ctx *middleware.Context, handler ContributeResourceHandler) *ContributeResource {
	return &ContributeResource{Context: ctx, Handler: handler}
}

/* ContributeResource swagger:route PUT /resource/contribute/{id} resource contributeResource

toggle active status of resource

*/
type ContributeResource struct {
	Context *middleware.Context
	Handler ContributeResourceHandler
}

func (o *ContributeResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewContributeResourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ContributeResourceOKBody contribute resource o k body
//
// swagger:model ContributeResourceOKBody
type ContributeResourceOKBody struct {

	// contributed
	Contributed bool `json:"contributed,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this contribute resource o k body
func (o *ContributeResourceOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this contribute resource o k body based on context it is used
func (o *ContributeResourceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContributeResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContributeResourceOKBody) UnmarshalBinary(b []byte) error {
	var res ContributeResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
