// Code generated by go-swagger; DO NOT EDIT.

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"tides-server/pkg/models"
)

// AddVsphereResourceHandlerFunc turns a function with the right signature into a add vsphere resource handler
type AddVsphereResourceHandlerFunc func(AddVsphereResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddVsphereResourceHandlerFunc) Handle(params AddVsphereResourceParams) middleware.Responder {
	return fn(params)
}

// AddVsphereResourceHandler interface for that can handle valid add vsphere resource params
type AddVsphereResourceHandler interface {
	Handle(AddVsphereResourceParams) middleware.Responder
}

// NewAddVsphereResource creates a new http.Handler for the add vsphere resource operation
func NewAddVsphereResource(ctx *middleware.Context, handler AddVsphereResourceHandler) *AddVsphereResource {
	return &AddVsphereResource{Context: ctx, Handler: handler}
}

/* AddVsphereResource swagger:route POST /resource/vsphere resource addVsphereResource

AddVsphereResource add vsphere resource API

*/
type AddVsphereResource struct {
	Context *middleware.Context
	Handler AddVsphereResourceHandler
}

func (o *AddVsphereResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddVsphereResourceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddVsphereResourceBody add vsphere resource body
//
// swagger:model AddVsphereResourceBody
type AddVsphereResourceBody struct {

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// datacenters
	Datacenters string `json:"datacenters,omitempty"`

	// host address
	HostAddress string `json:"hostAddress,omitempty"`

	// is resource pool
	IsResourcePool bool `json:"isResourcePool,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// policy
	Policy int64 `json:"policy,omitempty"`

	// resources
	Resources []string `json:"resources"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this add vsphere resource body
func (o *AddVsphereResourceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vsphere resource body based on context it is used
func (o *AddVsphereResourceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVsphereResourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVsphereResourceBody) UnmarshalBinary(b []byte) error {
	var res AddVsphereResourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVsphereResourceNotFoundBody add vsphere resource not found body
//
// swagger:model AddVsphereResourceNotFoundBody
type AddVsphereResourceNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add vsphere resource not found body
func (o *AddVsphereResourceNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vsphere resource not found body based on context it is used
func (o *AddVsphereResourceNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVsphereResourceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVsphereResourceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AddVsphereResourceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVsphereResourceOKBody add vsphere resource o k body
//
// swagger:model AddVsphereResourceOKBody
type AddVsphereResourceOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results []*models.ResourceAddItem `json:"results"`
}

// Validate validates this add vsphere resource o k body
func (o *AddVsphereResourceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddVsphereResourceOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addVsphereResourceOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add vsphere resource o k body based on the context it is used
func (o *AddVsphereResourceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddVsphereResourceOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {
			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addVsphereResourceOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddVsphereResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVsphereResourceOKBody) UnmarshalBinary(b []byte) error {
	var res AddVsphereResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
