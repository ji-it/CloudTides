// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPastUsageHandlerFunc turns a function with the right signature into a get past usage handler
type GetPastUsageHandlerFunc func(GetPastUsageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPastUsageHandlerFunc) Handle(params GetPastUsageParams) middleware.Responder {
	return fn(params)
}

// GetPastUsageHandler interface for that can handle valid get past usage params
type GetPastUsageHandler interface {
	Handle(GetPastUsageParams) middleware.Responder
}

// NewGetPastUsage creates a new http.Handler for the get past usage operation
func NewGetPastUsage(ctx *middleware.Context, handler GetPastUsageHandler) *GetPastUsage {
	return &GetPastUsage{Context: ctx, Handler: handler}
}

/* GetPastUsage swagger:route GET /usage/past/{id} usage getPastUsage

get past usage of a resource

*/
type GetPastUsage struct {
	Context *middleware.Context
	Handler GetPastUsageHandler
}

func (o *GetPastUsage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPastUsageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetPastUsageBody get past usage body
//
// swagger:model GetPastUsageBody
type GetPastUsageBody struct {

	// time length
	TimeLength int64 `json:"timeLength,omitempty"`
}

// Validate validates this get past usage body
func (o *GetPastUsageBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get past usage body based on context it is used
func (o *GetPastUsageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPastUsageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPastUsageBody) UnmarshalBinary(b []byte) error {
	var res GetPastUsageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetPastUsageNotFoundBody get past usage not found body
//
// swagger:model GetPastUsageNotFoundBody
type GetPastUsageNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get past usage not found body
func (o *GetPastUsageNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get past usage not found body based on context it is used
func (o *GetPastUsageNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPastUsageNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPastUsageNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetPastUsageNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetPastUsageOKBodyItems0 get past usage o k body items0
//
// swagger:model GetPastUsageOKBodyItems0
type GetPastUsageOKBodyItems0 struct {

	// current CPU
	CurrentCPU float64 `json:"currentCPU,omitempty"`

	// current disk
	CurrentDisk float64 `json:"currentDisk,omitempty"`

	// current RAM
	CurrentRAM float64 `json:"currentRAM,omitempty"`

	// percent CPU
	PercentCPU float64 `json:"percentCPU,omitempty"`

	// percent disk
	PercentDisk float64 `json:"percentDisk,omitempty"`

	// percent RAM
	PercentRAM float64 `json:"percentRAM,omitempty"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`
}

// Validate validates this get past usage o k body items0
func (o *GetPastUsageOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPastUsageOKBodyItems0) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get past usage o k body items0 based on context it is used
func (o *GetPastUsageOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPastUsageOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPastUsageOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPastUsageOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
