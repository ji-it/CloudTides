// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ResourcePastUsageHandlerFunc turns a function with the right signature into a resource past usage handler
type ResourcePastUsageHandlerFunc func(ResourcePastUsageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ResourcePastUsageHandlerFunc) Handle(params ResourcePastUsageParams) middleware.Responder {
	return fn(params)
}

// ResourcePastUsageHandler interface for that can handle valid resource past usage params
type ResourcePastUsageHandler interface {
	Handle(ResourcePastUsageParams) middleware.Responder
}

// NewResourcePastUsage creates a new http.Handler for the resource past usage operation
func NewResourcePastUsage(ctx *middleware.Context, handler ResourcePastUsageHandler) *ResourcePastUsage {
	return &ResourcePastUsage{Context: ctx, Handler: handler}
}

/*ResourcePastUsage swagger:route GET /usage usage resourcePastUsage

get resource usage info during last period

*/
type ResourcePastUsage struct {
	Context *middleware.Context
	Handler ResourcePastUsageHandler
}

func (o *ResourcePastUsage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewResourcePastUsageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
