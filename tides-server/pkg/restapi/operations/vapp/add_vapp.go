// Code generated by go-swagger; DO NOT EDIT.

package vapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddVappHandlerFunc turns a function with the right signature into a add vapp handler
type AddVappHandlerFunc func(AddVappParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddVappHandlerFunc) Handle(params AddVappParams) middleware.Responder {
	return fn(params)
}

// AddVappHandler interface for that can handle valid add vapp params
type AddVappHandler interface {
	Handle(AddVappParams) middleware.Responder
}

// NewAddVapp creates a new http.Handler for the add vapp operation
func NewAddVapp(ctx *middleware.Context, handler AddVappHandler) *AddVapp {
	return &AddVapp{Context: ctx, Handler: handler}
}

/* AddVapp swagger:route POST /vapp vapp addVapp

add vapp

*/
type AddVapp struct {
	Context *middleware.Context
	Handler AddVappHandler
}

func (o *AddVapp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddVappParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddVappBody add vapp body
//
// swagger:model AddVappBody
type AddVappBody struct {

	// datacenter
	Datacenter string `json:"datacenter,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// template
	Template int64 `json:"template,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this add vapp body
func (o *AddVappBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vapp body based on context it is used
func (o *AddVappBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVappBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVappBody) UnmarshalBinary(b []byte) error {
	var res AddVappBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVappNotFoundBody add vapp not found body
//
// swagger:model AddVappNotFoundBody
type AddVappNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add vapp not found body
func (o *AddVappNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vapp not found body based on context it is used
func (o *AddVappNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVappNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVappNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AddVappNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AddVappOKBody add vapp o k body
//
// swagger:model AddVappOKBody
type AddVappOKBody struct {

	// id
	ID int64 `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add vapp o k body
func (o *AddVappOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add vapp o k body based on context it is used
func (o *AddVappOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVappOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVappOKBody) UnmarshalBinary(b []byte) error {
	var res AddVappOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
