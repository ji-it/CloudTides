// Code generated by go-swagger; DO NOT EDIT.

package vapp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteVappHandlerFunc turns a function with the right signature into a delete vapp handler
type DeleteVappHandlerFunc func(DeleteVappParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteVappHandlerFunc) Handle(params DeleteVappParams) middleware.Responder {
	return fn(params)
}

// DeleteVappHandler interface for that can handle valid delete vapp params
type DeleteVappHandler interface {
	Handle(DeleteVappParams) middleware.Responder
}

// NewDeleteVapp creates a new http.Handler for the delete vapp operation
func NewDeleteVapp(ctx *middleware.Context, handler DeleteVappHandler) *DeleteVapp {
	return &DeleteVapp{Context: ctx, Handler: handler}
}

/* DeleteVapp swagger:route DELETE /vapp/{id} vapp deleteVapp

delete vapp

*/
type DeleteVapp struct {
	Context *middleware.Context
	Handler DeleteVappHandler
}

func (o *DeleteVapp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteVappParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteVappNotFoundBody delete vapp not found body
//
// swagger:model DeleteVappNotFoundBody
type DeleteVappNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete vapp not found body
func (o *DeleteVappNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete vapp not found body based on context it is used
func (o *DeleteVappNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteVappNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteVappNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteVappNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteVappOKBody delete vapp o k body
//
// swagger:model DeleteVappOKBody
type DeleteVappOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delete vapp o k body
func (o *DeleteVappOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete vapp o k body based on context it is used
func (o *DeleteVappOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteVappOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteVappOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteVappOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
