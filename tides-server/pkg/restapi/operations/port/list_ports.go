// Code generated by go-swagger; DO NOT EDIT.

package port

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListPortsHandlerFunc turns a function with the right signature into a list ports handler
type ListPortsHandlerFunc func(ListPortsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListPortsHandlerFunc) Handle(params ListPortsParams) middleware.Responder {
	return fn(params)
}

// ListPortsHandler interface for that can handle valid list ports params
type ListPortsHandler interface {
	Handle(ListPortsParams) middleware.Responder
}

// NewListPorts creates a new http.Handler for the list ports operation
func NewListPorts(ctx *middleware.Context, handler ListPortsHandler) *ListPorts {
	return &ListPorts{Context: ctx, Handler: handler}
}

/* ListPorts swagger:route GET /vm/ports/{id} port listPorts

list the exposed ports of a vmachine

*/
type ListPorts struct {
	Context *middleware.Context
	Handler ListPortsHandler
}

func (o *ListPorts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListPortsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListPortsOKBodyItems0 list ports o k body items0
//
// swagger:model ListPortsOKBodyItems0
type ListPortsOKBodyItems0 struct {

	// id
	ID int64 `json:"id,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this list ports o k body items0
func (o *ListPortsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list ports o k body items0 based on context it is used
func (o *ListPortsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListPortsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListPortsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListPortsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
